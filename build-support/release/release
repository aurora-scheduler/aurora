#!/bin/bash
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# This script is used to plublish an Aurora Scheduler release

set -e
set -o nounset

# If GPG_TTY is unset, set it to the default tty. Otherwise git will not prompt
# for a passpharse for the GPG-key and silently fail when trying to create signed
# commits/tags.
export GPG_TTY=${GPG_TTY:-$(tty)}

aurora_git_web_url='https://github.com/aurora-scheduler/aurora'

function print_help_and_exit {
cat <<EOF
Aurora Scheduler release tool.

Usage: $0 [-h] [-r #] [-p | publish]

  -h   Print this help message and exit
  -r   Release candidate number (default: 0)
  -p   Publish (default: dry-run (does not publish anything))
EOF
exit 0
}

publish=0
rc_tag_version=0
while getopts ":hl:r:p" opt; do
  case $opt in
    r)
      rc_tag_version=${OPTARG}
      ;;
    p)
      publish=1
      ;;
    h)
      print_help_and_exit
      ;;
    *  )
      echo "Unknown option: -$OPTARG"
      print_help_and_exit
      ;;
  esac
done

shift $(($OPTIND - 1))
if [[ "${1:-dry-run}" == "publish" ]]; then
  publish=1
fi

# Update local repository
git fetch --all -q
git fetch --tags -q

# Ensure that a signing key is available
if [[ -z "$(git config user.signingkey)" ]]; then
  cat <<EOF
Error: No GPG signing key can be found within gitconfig.

To configure one, find your code signing key's ID with

   gpg --list-secret-keys

Then configure it as the signing key for this repository with

   git config --global user.signingkey YOUR_KEY_ID
EOF
  exit 1
fi

# Set the base dir for the script to be the top level of the repository
base_dir=$(git rev-parse --show-toplevel)
# Verify that this is a clean repository
if [[ -n "$(git status --porcelain)" ]]; then
  echo "ERROR: Please run from a clean master."
  exit 1
elif [[ "$(git rev-parse --abbrev-ref HEAD)" == "master" ]]; then
  echo "ERROR: This script must be run from the released branch."
  exit 1
fi

if [[ "$base_dir" != "$PWD" ]]; then
  echo "Warrning: This script must be run from the root of the repository ${base_dir}"
  cd "$base_dir"
fi

# Make sure that this is not on a snapshot release
current_version=$(cat .auroraversion | tr '[a-z]' '[A-Z]')
if [[ $current_version =~ .*-SNAPSHOT ]]; then
  echo "ERROR: .auroraversion can not be a 'SNAPSHOT', it is ${current_version}"
  exit 1
else
  major=$(echo "$current_version" | cut -d. -f1)
  minor=$(echo "$current_version" | cut -d. -f2)
  patch=$(echo "$current_version" | cut -d. -f3 | cut -d- -f1)

  current_version="${major}.${minor}.${patch}"
fi

previous_version_tag="${current_version}-rc${rc_tag_version}"
current_version_tag="${current_version}"

# Make sure the tag does not exist
if [[ $(git ls-remote --exit-code --tags origin "refs/tags/${current_version}" >/dev/null 2>&1) == 0 ]]; then
  echo "ERROR: ${current_version} tag exists."
  exit 1
fi

# All check are now complete, before we start alert if we are in dry-run
if [[ $publish == 0 ]]; then
  echo "Performing dry-run"
fi

dist_name="aurora-scheduler-${current_version}"
dist_dir=${base_dir}/dist

mkdir -p "${dist_dir}"

function print_reset_instructions {
cat <<EOF
To roll back your local repo you will need to run:

  rm -rf ${dist_dir}
EOF
}

# If anything goes wrong from here then print roll back instructions before exiting.
function print_rollback_instructions {
  echo "ERROR: Looks like something has failed while creating the release."
  print_reset_instructions
}
trap print_rollback_instructions EXIT

if [[ $publish == 1 ]]; then
  # Create release branch and tag and push them to the origin
  echo "Creating ${current_version_tag} staging branch"
  git checkout -b "stage_${current_version_tag}"

  # Increment the version and create a branch
  echo "${current_version}" > .auroraversion
  git add .auroraversion
  git commit -m "Updating .auroraversion to release version ${current_version}."
  git tag -s "${current_version_tag}" \
    -m "Aurora Scheduler ${current_version} release" HEAD
  git push origin "${current_version_tag}"
fi

rc_dir=${dist_dir}/rc
release_dir=${dist_dir}/${current_version}
mkdir "${release_dir}"
mkdir -p "${rc_dir}"
cd "${dist_dir}"

# TODO(rdelvalle): Verify hashsum and detached signature after downloading
rc_release_location="${aurora_git_web_url}/releases/download/${previous_version_tag}/aurora-scheduler-${previous_version_tag}.tar.gz"
# Fetch the release candidate
wget --directory-prefix "${rc_dir}" "${rc_release_location}"

cd "${release_dir}"

# Rename the .auroraversion from -RC[:digit:] to release current_version and repackage the release
tar -xzf "${rc_dir}"/aurora-scheduler-*.tar.gz
mv aurora-scheduler-* "${dist_name}"
echo "${current_version}" > "${dist_name}/.auroraversion"
tar -czf "${dist_name}.tar.gz" "${dist_name}"
rm -rf "${dist_name}"

# Sign the tarball.
echo "Signing the distribution"
gpg --armor --output "${dist_name}.tar.gz.asc" --detach-sig "${dist_name}.tar.gz"

# Create the checksums
echo "Creating checksum"
shasum -a 512 "${dist_name}.tar.gz" > "${dist_name}.tar.gz.sha512"

cd "${base_dir}"

RELEASE_INST=$(cat <<__EOF__
Done creating the release candidate.
Please proceed to create a new release on github

https://github.com/aurora-scheduler/aurora/releases/new

Upload the following:

${release_dir}/${dist_name}.tar.gz
${release_dir}/${dist_name}.tar.gz.sha512
${release_dir}/${dist_name}.tar.gz.asc
__EOF__
)

if [[ $publish == 1 ]]; then
  echo "--------------------------------------------------------------------------------"
  echo
  echo "${RELEASE_INST}"
  echo
  echo "--------------------------------------------------------------------------------"
  echo
fi


echo
echo "Done creating the release."

release_location="${aurora_git_web_url}/releases/download/${current_version_tag}"

# Create the github release template to be used in the release page
MESSAGE=$(cat <<__EOF__
Aurora Scheduler ${current_version} includes the following:
---
The CHANGELOG for the release is available at:
${aurora_git_web_url}/blob/${current_version_tag}/CHANGELOG

The tag used to create the release with is ${current_version_tag}:
${aurora_git_web_url}/tree/${current_version_tag}

The release is available at:
${release_location}/${dist_name}.tar.gz

The SHA-512 checksum of the release can be found at:
${release_location}/${dist_name}.tar.gz.sha512

The signature of the release can be found at:
${release_location}/${dist_name}.tar.gz.asc

The GPG key used to sign the release are available at:
${aurora_git_web_url}/tree/${current_version_tag}/KEYS

__EOF__
)
echo "--------------------------------------------------------------------------------"
echo
echo "${MESSAGE}"
echo
echo "--------------------------------------------------------------------------------"
echo

# Print reset instructions if this was a dry-run
if [[ $publish == 0 ]]; then
  echo
  echo "This is a dry run, nothing has been published."
  echo
  print_reset_instructions
fi

# Unset error message handler and exit
trap '' EXIT
exit 0
